# -*- coding: utf-8 -*-
"""Proyecto - Misiones espaciales.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1siQnw8UvKArExm5HFKWFByQKKEVURV03
"""

import ipywidgets as widgets
from IPython.display import display
from IPython.display import clear_output
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd 
import numpy as np

url1 = 'https://es.wikipedia.org/wiki/Anexo:Misiones_espaciales'
#No contiene la información de misiones a la luna
data = pd.read_html(url1)

url2 = "https://es.wikipedia.org/wiki/Anexo:Misiones_espaciales_lanzadas_a_la_Luna"
#Contiene la información de las misiones a la luna 
data2 = pd.read_html(url2)

#Limpieza data1
data[1].drop( range(1, 14, 2), inplace = True)
data[1].drop( range(17, 38 ,4), inplace = True)
data[1].drop(["Operador",	"Programa",	"Lugar de lanzamiento"], axis =1 , inplace=True)
data[1].rename(columns={'Fecha de lanzamiento':'Fecha'}, inplace=True)
data[1].insert(5, "Notas", "-")

data[8].drop(["Objetivo"], axis=1, inplace=True)
data[11].drop(1, inplace = True)
data[11].rename(columns={'Fecha de lanzamiento':'Fecha'}, inplace=True)
data[11].insert(5, "Notas", "-")
data[11].drop(["Operador",	"Programa",	"Lugar de lanzamiento"], axis =1 , inplace=True)

data[15].drop(["Objetivo"], axis=1, inplace=True)
data[17].drop(["Ubicación"], axis=1, inplace=True)

#Limpieza data2
data2[2].drop(["Operador",	"Programa",	"Lugar de lanzamiento"], axis =1 , inplace=True)
data2[2].rename(columns={'Fecha de lanzamiento':'Fecha'}, inplace=True)
data2[2].insert(5, "Notas", "-")
data2[3].drop(["Operador",	"Programa",	"Lugar de lanzamiento"], axis =1 , inplace=True)
data2[3].rename(columns={'Fecha de lanzamiento':'Fecha'}, inplace=True)
data2[3].insert(5, "Notas", "-")


rows_to_keep = [x for x in range( len(data2[2].index) ) if  data2[2].iloc[x]["Nombre"] != data2[2].iloc[x]["País"] ]
lunaPrimeraEtapa = data2[2].iloc[rows_to_keep ,  :]
data.append(lunaPrimeraEtapa)

rows_to_keep2 = [x for x in range( len(data2[3].index) ) if  data2[3].iloc[x]["Nombre"] != data2[3].iloc[x]["País"] ]
lunaSegundaEtapa = data2[3].iloc[rows_to_keep2,:]
data.append(lunaSegundaEtapa)

destinos = ['Sol', 'Mercurio', 'Venus', 'Órbita de la Tierra', 'Sobrevuelos de sondas espaciales a la Tierra', 'Marte', 'Fobos y Deimos', 'Ceres', 'Asteroides', 'Júpiter', 'Saturno', 'Titán', 'Urano', 'Neptuno', 'Plutón', 'Cometas', 'Sondas espaciales que abandonan el Sistema solar', 'Otras sondas que abandonaron la órbita de la Tierra', "Luna primera etapa", "Luna segunda etapa"]
index = np.arange(0,len(destinos))

destinos_dropdown = widgets.Dropdown(
    options=  list(zip(destinos,index))   ,
    value=0,
    description='Destino:'
)

paises_dropdown = widgets.Dropdown(
    options= ["Todos", "Privado" , "Estados Unidos", "Alemania", "Europa", "Japón", "Unión Soviética", "Italia", "Alemania nazi",  "Francia", "China", "India", "Rusia", "Israel", "Canadá", "Irán", "Corea del Norte", "Emiratos Árabes Unidos"],
    value = "Todos",
    description = "País:"
)

misiones_dropdown = widgets.Dropdown(
    options = ["Todos","Sobrevuelo", "Orbital", "Sonda atmosférica", "Impacto", "Observación", "Prueba", "Aterrizaje", "Globo", "Vuelo suborbital no tripulado", "Orbital no tripulado", "Orbital tripulado", "Suborbital tripulado", "Amartizaje",  "Penetrador", "Todoterreno"],
    value = "Todos",
    description = "Misión:"
)

resultado_dropdown = widgets.Dropdown(
    options = ["Todos", "Éxito","Parcial","Fracaso", "En Proceso", "En ruta"],
    value = "Todos",
    description = "Resultado:"
)




space1 = widgets.Label(
    value="",  
    layout = widgets.Layout( height = "25px")
    )

space2 = widgets.Label(
    value="",
    layout = widgets.Layout( height = "50px")
    )

space3 = widgets.Label(
    value="",
    layout = widgets.Layout(  height = "75px")
    )

title = widgets.Label(
    value="MISIONES ESPACIALES",
    layout = widgets.Layout( display = "flex", justify_content='center')
    )

button_search = widgets.Button(
    description='Buscar',
    disabled=False,
    button_style='', # 'success', 'info', 'warning', 'danger' or ''
    tooltip='Buscar',
    layout = widgets.Layout( border = "0.5px solid black")
)

def aux(button):
  filtrainformacion(destinos_dropdown.value, paises_dropdown.value, misiones_dropdown.value, resultado_dropdown.value)

button_search.on_click(aux)

dropdown_widgets = widgets.HBox([destinos_dropdown, paises_dropdown, misiones_dropdown, resultado_dropdown], layout = widgets.Layout(width="100%", justify_content='center'))
button_widget = widgets.HBox([button_search], layout = widgets.Layout(width="100%", justify_content='center'))


display(space1)
display(title)
display(space1)
display(dropdown_widgets)
display(space1)
display(button_widget )
display(space2)


output_dataset_exploration = widgets.Output(layout={'border': '1px solid black'})
output_countries_graphic = widgets.Output(layout={'border': '1px solid black'})
output_results_graphic = widgets.Output(layout={'border': '1px solid black'})


tab = widgets.Tab([output_dataset_exploration,output_countries_graphic, output_results_graphic])
tab.set_title(0, 'Dataset Exploration')
tab.set_title(1, 'Countries Graphic')
tab.set_title(2, 'Results Graphic')
display(tab)


def filtrainformacion(destino, pais, mision, resultado):
  
  datosFiltrados = []
  
  datosFiltrados =  data[destino][
                                  (data[destino].País == data[destino].País if pais == "Todos" else  data[destino].País.str.contains(pais)) &
                                  (data[destino].Misión == data[destino].Misión if mision == "Todos" else  data[destino].Misión == mision) &
                                  (data[destino].Resultado == data[destino].Resultado if resultado == "Todos" else  data[destino].Resultado == resultado)]


  mostrarInformacion(datosFiltrados)

  graficarPaises(list(data[destino]["País"]))
  
  graficarResultado(list(data[destino]["Resultado"]))


def mostrarInformacion(data):

  empty_data_message = widgets.Label(value= "No se encontraron datos",  layout = widgets.Layout( display="flex", justify_content='center'))

  with output_dataset_exploration:
    output_dataset_exploration.clear_output()
    if len( data.index) == 0:
      display(empty_data_message)
    else:
      fig = go.Figure(
        data=[go.Table(
          columnwidth = [400]*7,
          header=dict(values=list(data.columns),
          line_color='darkslategray',
          fill_color="grey",
          font=dict(color='white', size=12),
          align='center'),

          cells=dict(values=[data.Nombre,	data.País, 	data.Fecha, 	data.Misión, 	data.Resultado, data.Notas, data.Cohete],
          line_color='darkslategray',
          
          fill_color = [["lightgrey","white"] * len(data.index)],
          font = dict(color = 'darkslategray', size = 11),
          align='right'),
          name = "Tabla"
          )
        ])
      fig.show()

def graficarPaises(data):
  paisesListos = []
  for  i in range(len(data)):
    data[i] = data[i].replace("\xa0", "")
    if "/" in data[i]:
      words = data[i].split("/")
      for i in words:
        paisesListos.append(i)
    else:
      paisesListos.append(data[i])
  diccionario = {}
  for i in paisesListos:
    if diccionario.get(i): 
      diccionario[i] =  1 + diccionario.get(i)
    else: 
      diccionario[i] =  1

  df = np.transpose( [list(diccionario.keys()) , list(diccionario.values())]  ) 
  df = pd.DataFrame(df, columns=["Countries", "Missions"])

  with output_countries_graphic:
    output_countries_graphic.clear_output()
    fig = px.bar(df,x="Countries" , y="Missions" , title='Missions by country')
    fig.update_traces(texttemplate='%{y}', textposition='inside')
    fig.show()

def graficarResultado(data):
  diccionario = {}
  for i in data:
    if diccionario.get(i): 
      diccionario[i] =  1 + diccionario.get(i)
    else: 
      diccionario[i] =  1

  df = np.transpose( [list(diccionario.keys()) , list(diccionario.values())]  ) 
  df = pd.DataFrame(df, columns=["Result", "Missions"])

  with output_results_graphic:
    output_results_graphic.clear_output()
    fig = px.pie(df, values='Missions', names='Result', title='t')
    fig.show()